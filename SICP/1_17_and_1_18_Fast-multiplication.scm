(define (even? n)
  (= (remainder n 2) 0)
  )

(define (double n)
  (+ n n)
  )
(define (halve n)
  (/ n 2)
  )

(define (multiply a b steps)
  (display steps) (newline)
  (cond ((= b 0) 0)
        ((even? b) (multiply (double a) (halve b) (+ 1 steps)))
        (else (+ a (multiply (double a) (halve (- b 1)) (+ 1 steps) )))
        )
  )

(define (multiply-iter a b)
  (define (mul-iter accumulate a b steps)
    (display steps) (newline)
    (cond ((= b 0) accumulate)
        ((even? b) (mul-iter accumulate (double a) (halve b) (+ 1 steps)))
        (else (mul-iter (+ accumulate a) (double a) (halve (- b 1)) (+ 1 steps)))
        )
    )
  (mul-iter 0 a b 1)
  )